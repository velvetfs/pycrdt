[build-system]
requires = ["maturin>=1.8.2,<2"]
build-backend = "maturin"

[project]
name = "pycrdt-sticky-xml"
dynamic = ["version"]
description = "Python bindings for Yrs with sticky_index support for XML types"
license = { file = "LICENSE" }
authors = [
    { name = "David Brochart", email = "david.brochart@gmail.com" },
    { name = "Joshua Lawrence", email = "josh@velvetfs.com" },
]
readme = "README.md"
keywords = [
    "crdt",
    "xml",
    "sticky-index",
    "collaborative-editing",
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries",
    "Topic :: Text Processing :: Markup :: XML",
]

dependencies = [
    "anyio >=4.4.0,<5.0.0",
    "importlib_metadata >=3.6; python_version<'3.10'",
    "typing_extensions >=4.14.0; python_version<'3.11'",
]

[dependency-groups]
test = [
    "pytest >=8.3.5,<9",
    "pytest-mypy-testing",
    "anyio",
    "trio >=0.25.1,<0.31",
    "pydantic >=2.5.2,<3",
    "mypy",
    "coverage[toml] >=7",
    "exceptiongroup; python_version<'3.11'",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
]

[project.urls]
Homepage = "https://github.com/yourusername/pycrdt-sticky-xml"
"Original Project" = "https://github.com/y-crdt/pycrdt"
"Bug Tracker" = "https://github.com/yourusername/pycrdt-sticky-xml/issues"

[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "python"
module-name = "pycrdt_sticky_xml._pycrdt"

[tool.ruff]
exclude = ["tests/test_types.py"]
line-length = 100
lint.select = ["F", "E", "W", "I001"]

[tool.coverage.run]
source = ["python", "tests"]
omit = ["tests/test_types.py"]

[tool.coverage.report]
show_missing = true
exclude_also = [
    "if TYPE_CHECKING:"
]
 
[tool.mypy]
check_untyped_defs = true

[tool.pytest.ini_options]
filterwarnings = [
    "error",
]